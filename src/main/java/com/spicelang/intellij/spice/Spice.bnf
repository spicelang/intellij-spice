{
  parserClass="com.spicelang.intellij.spice.SpiceParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Spice"
  psiImplClassSuffix="Impl"
  psiPackage="com.spicelang.intellij.spice.psi"
  psiImplPackage="com.spicelang.intellij.spice.psi.impl"

  elementTypeHolderClass="com.spicelang.intellij.spice.psi.SpiceTypes"
  elementTypeClass="com.spicelang.intellij.spice.psi.SpiceElementType"
  tokenTypeClass="com.spicelang.intellij.spice.psi.SpiceTokenType"

  psiImplUtilClass="com.spicelang.intellij.spice.psi.impl.SpicePsiImplUtil"
}

// Control structures
spiceFile ::= (mainFunctionDef | functionDef | procedureDef | structDef | globalVarDef | importStmt | extDecl | lineCom | blockCom)*
lineCom ::= LINE_COMMENT
blockCom ::= BLOCK_COMMENT
mainFunctionDef ::= F LESS TYPE_INT GREATER MAIN LPAREN paramLstDef? RPAREN LBRACE stmtLst RBRACE
functionDef ::= declSpecifiers? F LESS dataType GREATER (identifierExpr DOT)? identifierExpr LPAREN paramLstDef? RPAREN LBRACE stmtLst RBRACE
procedureDef ::= declSpecifiers? P (identifierExpr DOT)? identifierExpr LPAREN paramLstDef? RPAREN LBRACE stmtLst RBRACE
extDecl ::= EXT (LESS dataType GREATER)? identifierExpr LPAREN typeLst? RPAREN DLL? SEMICOLON
structDef ::= declSpecifiers? TYPE identifierExpr STRUCT LBRACE field* RBRACE
globalVarDef ::= declSpecifiers? dataType identifierExpr (ASSIGN MINUS? value)? SEMICOLON
threadDef ::= THREAD LBRACE stmtLst RBRACE
forLoop ::= FOR (forHead | LPAREN forHead RPAREN) LBRACE stmtLst RBRACE
forHead ::= declStmt SEMICOLON assignExpr SEMICOLON assignExpr
foreachLoop ::= FOREACH (foreachHead | LPAREN foreachHead RPAREN) LBRACE stmtLst RBRACE
foreachHead ::= (declStmt COMMA)? declStmt COLON assignExpr
whileLoop ::= WHILE assignExpr LBRACE stmtLst RBRACE
ifStmt ::= IF assignExpr LBRACE stmtLst RBRACE elseStmt?
elseStmt ::= ELSE ifStmt | ELSE LBRACE stmtLst RBRACE

// Statements, declarations, definitions and lists
stmtLst ::= (stmt | forLoop | foreachLoop | whileLoop | ifStmt | threadDef)*
field ::= declSpecifiers? dataType IDENTIFIER
typeLst ::= dataType (COMMA dataType)* ELLIPSIS?
paramLstDef ::= declStmt (COMMA declStmt)*
paramLst ::= assignExpr (COMMA assignExpr)*
stmt ::= (declStmt | assignExpr | returnStmt | breakStmt | continueStmt) SEMICOLON
declStmt ::= declSpecifiers? dataType identifierExpr (ASSIGN assignExpr)?
declSpecifiers ::= declSpecifier+
declSpecifier ::= CONST | SIGNED | UNSIGNED | INLINE | PUBLIC
importStmt ::= IMPORT STRING_LITERAL AS identifierExpr SEMICOLON
returnStmt ::= RETURN assignExpr?
breakStmt ::= BREAK INTEGER?
continueStmt ::= CONTINUE INTEGER?

// Builtin functions
builtinCall ::= printfCall | sizeOfCall
printfCall ::= PRINTF LPAREN STRING_LITERAL (COMMA assignExpr)* RPAREN
sizeOfCall ::= SIZEOF LPAREN assignExpr RPAREN

// Expression loop
assignExpr ::= prefixUnaryExpr assignOp assignExpr | ternaryExpr | threadDef
ternaryExpr ::= logicalOrExpr (QUESTION_MARK logicalOrExpr COLON logicalOrExpr)?
logicalOrExpr ::= logicalAndExpr (LOGICAL_OR logicalAndExpr)*
logicalAndExpr ::= bitwiseOrExpr (LOGICAL_AND bitwiseOrExpr)*
bitwiseOrExpr ::= bitwiseXorExpr (BITWISE_OR bitwiseXorExpr)*
bitwiseXorExpr ::= bitwiseAndExpr (BITWISE_XOR bitwiseAndExpr)*
bitwiseAndExpr ::= equalityExpr (BITWISE_AND equalityExpr)*
equalityExpr ::= relationalExpr ((EQUAL | NOT_EQUAL) relationalExpr)?
relationalExpr ::= shiftExpr ((LESS | GREATER | LESS_EQUAL | GREATER_EQUAL) shiftExpr)?
shiftExpr ::= additiveExpr ((SHL | SHR) additiveExpr)?
additiveExpr ::= multiplicativeExpr ((PLUS | MINUS) multiplicativeExpr)*
multiplicativeExpr ::= castExpr ((MUL | DIV | REM) castExpr)*
castExpr ::= prefixUnaryExpr | LPAREN dataType RPAREN prefixUnaryExpr
prefixUnaryExpr ::= prefixUnaryOp* postfixUnaryExpr
postfixUnaryExpr ::= atomicExpr (LBRACKET assignExpr RBRACKET | LPAREN paramLst? RPAREN | DOT postfixUnaryExpr | PLUS_PLUS | MINUS_MINUS)*
atomicExpr ::= value | identifierExpr | builtinCall | LPAREN assignExpr RPAREN {methods=[getIdentifier]}

// Values and types
identifierExpr ::= IDENTIFIER {
    mixin="com.spicelang.intellij.spice.psi.impl.SpiceNamedElementImpl"
    implements="com.spicelang.intellij.spice.psi.SpiceNamedElement"
    methods=[getIdentifier getName setName getNameIdentifier]
}
value ::= primitiveValue | LBRACE paramLst? RBRACE | identifierExpr (DOT identifierExpr)* LBRACE paramLst? RBRACE | NIL LESS dataType GREATER
primitiveValue ::= DOUBLE | INTEGER | SHORT | LONG | CHAR_LITERAL | STRING_LITERAL | TRUE | FALSE
dataType ::= baseDataType (MUL | LBRACKET INTEGER? RBRACKET)*
baseDataType ::= TYPE_DOUBLE | TYPE_INT | TYPE_SHORT | TYPE_LONG | TYPE_BYTE | TYPE_CHAR | TYPE_STRING | TYPE_BOOL | TYPE_DYN | identifierExpr (DOT identifierExpr)*

// Shorthands
assignOp ::= ASSIGN | PLUS_EQUAL | MINUS_EQUAL | MUL_EQUAL | DIV_EQUAL | REM_EQUAL | SHL_EQUAL | SHR_EQUAL | AND_EQUAL | OR_EQUAL | XOR_EQUAL
prefixUnaryOp ::= MINUS | PLUS_PLUS | MINUS_MINUS | NOT | BITWISE_NOT | MUL | BITWISE_AND