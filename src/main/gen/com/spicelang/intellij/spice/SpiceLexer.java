/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.spicelang.intellij.spice;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.spicelang.intellij.spice.psi.SpiceTokenType;
import com.spicelang.intellij.spice.psi.SpiceTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Spice.flex</tt>
 */
class SpiceLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\15\1\3\2\4\1\3\22\0\1\15\1\55\1\5\2\0\1\62\1\54\1\1\1\47\1\50\1\13"+
    "\1\56\1\66\1\6\1\14\1\12\1\10\11\7\1\65\1\64\1\60\1\57\1\61\1\63\1\0\32\11"+
    "\1\51\1\2\1\52\1\0\1\11\1\0\1\35\1\21\1\34\1\16\1\23\1\36\1\32\1\30\1\24\1"+
    "\11\1\42\1\22\1\41\1\25\1\17\1\37\1\11\1\31\1\27\1\26\1\20\1\11\1\40\1\44"+
    "\1\33\1\43\1\45\1\53\1\46\7\0\1\4\242\0\2\4\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\2\4\1\5\1\6"+
    "\1\7\1\10\13\5\1\11\1\12\2\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\3\0\1\36\1\37\1\0\1\40\2\0"+
    "\1\41\1\0\1\42\1\43\1\0\12\5\1\44\13\5"+
    "\1\45\5\5\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\2\60\1\0\1\61\1\5"+
    "\1\62\1\63\5\5\1\64\1\65\1\5\1\66\1\67"+
    "\10\5\1\70\4\5\1\71\1\72\1\73\1\5\1\74"+
    "\1\5\1\75\1\76\1\77\1\5\1\100\1\101\7\5"+
    "\1\102\4\5\1\103\1\5\1\104\4\5\1\105\2\5"+
    "\1\106\1\5\1\107\1\5\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\2\5\1\117\1\5\1\120\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717"+
    "\0\67\0\67\0\67\0\67\0\67\0\156\0\67\0\u074e"+
    "\0\334\0\u0785\0\67\0\67\0\u0181\0\67\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\67\0\67\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u01b8"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u01b8\0\u0d52\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u0e65\0\67\0\u0e9c\0\u07bc\0\u07f3\0\u0ed3\0\67\0\u0f0a"+
    "\0\u01b8\0\u01b8\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u01b8"+
    "\0\u01b8\0\u1054\0\u01b8\0\u01b8\0\u108b\0\u10c2\0\u10f9\0\u1130"+
    "\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8"+
    "\0\u131f\0\67\0\67\0\67\0\u1356\0\u01b8\0\u138d\0\u01b8"+
    "\0\u01b8\0\u01b8\0\u13c4\0\u01b8\0\u01b8\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u01b8\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u01b8\0\u1658\0\u01b8\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u01b8\0\u176b\0\u17a2\0\u01b8\0\u17d9\0\u01b8\0\u1810\0\u01b8"+
    "\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u01b8\0\u1847\0\u187e"+
    "\0\u01b8\0\u18b5\0\u01b8\0\u01b8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\4\1\15\2\11"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\11"+
    "\1\25\2\11\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\3\11\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\67\0\1\56\1\57\1\60\64\56"+
    "\3\0\1\4\11\0\1\4\51\0\2\61\1\62\2\61"+
    "\1\63\61\61\6\0\1\64\1\7\1\65\46\0\1\66"+
    "\7\0\3\67\2\0\2\67\2\7\61\67\2\0\2\67"+
    "\2\70\56\67\7\0\3\11\4\0\27\11\34\0\1\71"+
    "\1\72\43\0\1\73\66\0\1\74\23\0\1\75\61\0"+
    "\3\11\4\0\1\11\1\76\2\11\1\77\10\11\1\100"+
    "\11\11\31\0\3\11\4\0\1\11\1\101\11\11\1\102"+
    "\1\11\1\103\11\11\31\0\3\11\4\0\1\11\1\104"+
    "\25\11\31\0\3\11\4\0\4\11\1\105\21\11\1\106"+
    "\31\0\3\11\4\0\7\11\1\107\10\11\1\110\2\11"+
    "\1\111\3\11\31\0\3\11\4\0\5\11\1\112\1\113"+
    "\20\11\31\0\3\11\4\0\13\11\1\114\1\11\1\115"+
    "\11\11\31\0\3\11\4\0\6\11\1\116\1\11\1\117"+
    "\1\11\1\120\14\11\31\0\3\11\4\0\5\11\1\121"+
    "\21\11\31\0\3\11\4\0\1\11\1\122\10\11\1\123"+
    "\14\11\31\0\3\11\4\0\11\11\1\124\15\11\31\0"+
    "\3\11\4\0\1\11\1\125\15\11\1\126\7\11\31\0"+
    "\3\11\4\0\13\11\1\127\13\11\31\0\3\11\4\0"+
    "\12\11\1\130\14\11\31\0\3\11\4\0\17\11\1\131"+
    "\7\11\75\0\1\132\67\0\1\133\71\0\1\134\65\0"+
    "\1\135\1\136\66\0\1\137\66\0\1\140\1\141\65\0"+
    "\1\142\1\0\1\143\5\0\3\56\2\0\62\56\3\61"+
    "\2\0\62\61\7\0\2\144\56\0\3\67\2\0\2\67"+
    "\2\145\56\67\3\71\2\0\62\71\13\72\1\146\53\72"+
    "\14\0\1\147\61\0\3\11\4\0\2\11\1\150\24\11"+
    "\31\0\3\11\4\0\4\11\1\151\22\11\31\0\3\11"+
    "\4\0\7\11\1\152\17\11\31\0\3\11\4\0\1\11"+
    "\1\153\25\11\31\0\3\11\4\0\5\11\1\154\21\11"+
    "\31\0\3\11\4\0\10\11\1\155\16\11\31\0\3\11"+
    "\4\0\7\11\1\156\17\11\31\0\3\11\4\0\11\11"+
    "\1\157\15\11\31\0\3\11\4\0\10\11\1\160\16\11"+
    "\31\0\3\11\4\0\10\11\1\161\16\11\31\0\3\11"+
    "\4\0\21\11\1\162\5\11\31\0\3\11\4\0\22\11"+
    "\1\163\4\11\31\0\3\11\4\0\4\11\1\164\22\11"+
    "\31\0\3\11\4\0\2\11\1\165\24\11\31\0\3\11"+
    "\4\0\21\11\1\166\5\11\31\0\3\11\4\0\25\11"+
    "\1\167\1\11\31\0\3\11\4\0\13\11\1\170\13\11"+
    "\31\0\3\11\4\0\1\11\1\171\25\11\31\0\3\11"+
    "\4\0\10\11\1\172\16\11\31\0\3\11\4\0\7\11"+
    "\1\173\17\11\31\0\3\11\4\0\17\11\1\174\7\11"+
    "\31\0\3\11\4\0\13\11\1\175\13\11\31\0\3\11"+
    "\4\0\4\11\1\176\22\11\31\0\3\11\4\0\6\11"+
    "\1\177\20\11\31\0\3\11\4\0\6\11\1\200\20\11"+
    "\31\0\3\11\4\0\6\11\1\201\20\11\101\0\1\202"+
    "\66\0\1\203\7\0\12\72\1\204\1\146\53\72\7\0"+
    "\3\11\4\0\3\11\1\205\23\11\31\0\3\11\4\0"+
    "\4\11\1\206\22\11\31\0\3\11\4\0\17\11\1\207"+
    "\7\11\31\0\3\11\4\0\5\11\1\210\21\11\31\0"+
    "\3\11\4\0\14\11\1\211\12\11\31\0\3\11\4\0"+
    "\5\11\1\212\21\11\31\0\3\11\4\0\1\11\1\213"+
    "\25\11\31\0\3\11\4\0\5\11\1\214\21\11\31\0"+
    "\3\11\4\0\5\11\1\215\21\11\31\0\3\11\4\0"+
    "\5\11\1\216\21\11\31\0\3\11\4\0\2\11\1\217"+
    "\3\11\1\220\20\11\31\0\3\11\4\0\13\11\1\221"+
    "\13\11\31\0\3\11\4\0\2\11\1\222\24\11\31\0"+
    "\3\11\4\0\10\11\1\223\1\224\15\11\31\0\3\11"+
    "\4\0\13\11\1\225\13\11\31\0\3\11\4\0\5\11"+
    "\1\226\21\11\31\0\3\11\4\0\11\11\1\227\15\11"+
    "\31\0\3\11\4\0\7\11\1\230\17\11\31\0\3\11"+
    "\4\0\4\11\1\231\22\11\31\0\3\11\4\0\7\11"+
    "\1\232\17\11\31\0\3\11\4\0\4\11\1\233\22\11"+
    "\31\0\3\11\4\0\24\11\1\234\2\11\31\0\3\11"+
    "\4\0\13\11\1\235\13\11\31\0\3\11\4\0\1\11"+
    "\1\236\25\11\31\0\3\11\4\0\16\11\1\237\10\11"+
    "\31\0\3\11\4\0\7\11\1\240\17\11\31\0\3\11"+
    "\4\0\10\11\1\241\16\11\31\0\3\11\4\0\13\11"+
    "\1\242\13\11\31\0\3\11\4\0\6\11\1\243\20\11"+
    "\31\0\3\11\4\0\10\11\1\244\16\11\31\0\3\11"+
    "\4\0\17\11\1\245\7\11\31\0\3\11\4\0\5\11"+
    "\1\246\21\11\31\0\3\11\4\0\10\11\1\247\16\11"+
    "\31\0\3\11\4\0\5\11\1\250\21\11\31\0\3\11"+
    "\4\0\5\11\1\251\21\11\31\0\3\11\4\0\10\11"+
    "\1\252\16\11\31\0\3\11\4\0\20\11\1\253\6\11"+
    "\31\0\3\11\4\0\10\11\1\254\16\11\31\0\3\11"+
    "\4\0\14\11\1\255\12\11\31\0\3\11\4\0\7\11"+
    "\1\256\17\11\31\0\3\11\4\0\7\11\1\257\17\11"+
    "\31\0\3\11\4\0\16\11\1\260\10\11\31\0\3\11"+
    "\4\0\20\11\1\261\6\11\31\0\3\11\4\0\2\11"+
    "\1\262\24\11\31\0\3\11\4\0\12\11\1\263\14\11"+
    "\31\0\3\11\4\0\5\11\1\264\21\11\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\6\11\7\1\5\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\1\1\1\0\2\11"+
    "\1\0\34\1\7\11\1\1\1\11\3\1\1\0\1\11"+
    "\32\1\3\11\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[180];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SpiceLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 82: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 3: 
            { return SpiceTypes.MINUS;
            } 
            // fall through
          case 84: break;
          case 4: 
            { return SpiceTypes.INTEGER;
            } 
            // fall through
          case 85: break;
          case 5: 
            { return SpiceTypes.IDENTIFIER;
            } 
            // fall through
          case 86: break;
          case 6: 
            { return SpiceTypes.DIV;
            } 
            // fall through
          case 87: break;
          case 7: 
            { return SpiceTypes.MUL;
            } 
            // fall through
          case 88: break;
          case 8: 
            { return SpiceTypes.DOT;
            } 
            // fall through
          case 89: break;
          case 9: 
            { return SpiceTypes.F;
            } 
            // fall through
          case 90: break;
          case 10: 
            { return SpiceTypes.P;
            } 
            // fall through
          case 91: break;
          case 11: 
            { return SpiceTypes.LBRACE;
            } 
            // fall through
          case 92: break;
          case 12: 
            { return SpiceTypes.RBRACE;
            } 
            // fall through
          case 93: break;
          case 13: 
            { return SpiceTypes.LPAREN;
            } 
            // fall through
          case 94: break;
          case 14: 
            { return SpiceTypes.RPAREN;
            } 
            // fall through
          case 95: break;
          case 15: 
            { return SpiceTypes.LBRACKET;
            } 
            // fall through
          case 96: break;
          case 16: 
            { return SpiceTypes.RBRACKET;
            } 
            // fall through
          case 97: break;
          case 17: 
            { return SpiceTypes.BITWISE_OR;
            } 
            // fall through
          case 98: break;
          case 18: 
            { return SpiceTypes.BITWISE_AND;
            } 
            // fall through
          case 99: break;
          case 19: 
            { return SpiceTypes.NOT;
            } 
            // fall through
          case 100: break;
          case 20: 
            { return SpiceTypes.PLUS;
            } 
            // fall through
          case 101: break;
          case 21: 
            { return SpiceTypes.ASSIGN_OP;
            } 
            // fall through
          case 102: break;
          case 22: 
            { return SpiceTypes.LESS;
            } 
            // fall through
          case 103: break;
          case 23: 
            { return SpiceTypes.GREATER;
            } 
            // fall through
          case 104: break;
          case 24: 
            { return SpiceTypes.REM;
            } 
            // fall through
          case 105: break;
          case 25: 
            { return SpiceTypes.QUESTION_MARK;
            } 
            // fall through
          case 106: break;
          case 26: 
            { return SpiceTypes.SEMICOLON;
            } 
            // fall through
          case 107: break;
          case 27: 
            { return SpiceTypes.COLON;
            } 
            // fall through
          case 108: break;
          case 28: 
            { return SpiceTypes.COMMA;
            } 
            // fall through
          case 109: break;
          case 29: 
            { return SpiceTypes.CHAR;
            } 
            // fall through
          case 110: break;
          case 30: 
            { return SpiceTypes.STRING;
            } 
            // fall through
          case 111: break;
          case 31: 
            { return SpiceTypes.MINUS_MINUS;
            } 
            // fall through
          case 112: break;
          case 32: 
            { return SpiceTypes.MINUS_EQUAL;
            } 
            // fall through
          case 113: break;
          case 33: 
            { return SpiceTypes.LINE_COMMENT;
            } 
            // fall through
          case 114: break;
          case 34: 
            { return SpiceTypes.DIV_EQUAL;
            } 
            // fall through
          case 115: break;
          case 35: 
            { return SpiceTypes.MUL_EQUAL;
            } 
            // fall through
          case 116: break;
          case 36: 
            { return SpiceTypes.IF;
            } 
            // fall through
          case 117: break;
          case 37: 
            { return SpiceTypes.AS;
            } 
            // fall through
          case 118: break;
          case 38: 
            { return SpiceTypes.LOGICAL_OR;
            } 
            // fall through
          case 119: break;
          case 39: 
            { return SpiceTypes.LOGICAL_AND;
            } 
            // fall through
          case 120: break;
          case 40: 
            { return SpiceTypes.NOT_EQUAL;
            } 
            // fall through
          case 121: break;
          case 41: 
            { return SpiceTypes.PLUS_PLUS;
            } 
            // fall through
          case 122: break;
          case 42: 
            { return SpiceTypes.PLUS_EQUAL;
            } 
            // fall through
          case 123: break;
          case 43: 
            { return SpiceTypes.EQUAL;
            } 
            // fall through
          case 124: break;
          case 44: 
            { return SpiceTypes.LESS_EQUAL;
            } 
            // fall through
          case 125: break;
          case 45: 
            { return SpiceTypes.SHL;
            } 
            // fall through
          case 126: break;
          case 46: 
            { return SpiceTypes.GREATER_EQUAL;
            } 
            // fall through
          case 127: break;
          case 47: 
            { return SpiceTypes.SHR;
            } 
            // fall through
          case 128: break;
          case 48: 
            { return SpiceTypes.DOUBLE;
            } 
            // fall through
          case 129: break;
          case 49: 
            { return SpiceTypes.ELLIPSIS;
            } 
            // fall through
          case 130: break;
          case 50: 
            { return SpiceTypes.DLL;
            } 
            // fall through
          case 131: break;
          case 51: 
            { return SpiceTypes.TYPE_DYN;
            } 
            // fall through
          case 132: break;
          case 52: 
            { return SpiceTypes.EXT;
            } 
            // fall through
          case 133: break;
          case 53: 
            { return SpiceTypes.TYPE_INT;
            } 
            // fall through
          case 134: break;
          case 54: 
            { return SpiceTypes.NEW;
            } 
            // fall through
          case 135: break;
          case 55: 
            { return SpiceTypes.NIL;
            } 
            // fall through
          case 136: break;
          case 56: 
            { return SpiceTypes.FOR;
            } 
            // fall through
          case 137: break;
          case 57: 
            { return SpiceTypes.SHL_EQUAL;
            } 
            // fall through
          case 138: break;
          case 58: 
            { return SpiceTypes.SHR_EQUAL;
            } 
            // fall through
          case 139: break;
          case 59: 
            { return SpiceTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 140: break;
          case 60: 
            { return SpiceTypes.TYPE_BOOL;
            } 
            // fall through
          case 141: break;
          case 61: 
            { return SpiceTypes.TYPE_BYTE;
            } 
            // fall through
          case 142: break;
          case 62: 
            { return SpiceTypes.TYPE_LONG;
            } 
            // fall through
          case 143: break;
          case 63: 
            { return SpiceTypes.ELSE;
            } 
            // fall through
          case 144: break;
          case 64: 
            { return SpiceTypes.TRUE;
            } 
            // fall through
          case 145: break;
          case 65: 
            { return SpiceTypes.TYPE;
            } 
            // fall through
          case 146: break;
          case 66: 
            { return SpiceTypes.TYPE_CHAR;
            } 
            // fall through
          case 147: break;
          case 67: 
            { return SpiceTypes.MAIN;
            } 
            // fall through
          case 148: break;
          case 68: 
            { return SpiceTypes.BREAK;
            } 
            // fall through
          case 149: break;
          case 69: 
            { return SpiceTypes.TYPE_SHORT;
            } 
            // fall through
          case 150: break;
          case 70: 
            { return SpiceTypes.CONST;
            } 
            // fall through
          case 151: break;
          case 71: 
            { return SpiceTypes.FALSE;
            } 
            // fall through
          case 152: break;
          case 72: 
            { return SpiceTypes.WHILE;
            } 
            // fall through
          case 153: break;
          case 73: 
            { return SpiceTypes.TYPE_DOUBLE;
            } 
            // fall through
          case 154: break;
          case 74: 
            { return SpiceTypes.IMPORT;
            } 
            // fall through
          case 155: break;
          case 75: 
            { return SpiceTypes.SIZEOF;
            } 
            // fall through
          case 156: break;
          case 76: 
            { return SpiceTypes.STRUCT;
            } 
            // fall through
          case 157: break;
          case 77: 
            { return SpiceTypes.TYPE_STRING;
            } 
            // fall through
          case 158: break;
          case 78: 
            { return SpiceTypes.RETURN;
            } 
            // fall through
          case 159: break;
          case 79: 
            { return SpiceTypes.PRINTF;
            } 
            // fall through
          case 160: break;
          case 80: 
            { return SpiceTypes.FOREACH;
            } 
            // fall through
          case 161: break;
          case 81: 
            { return SpiceTypes.CONTINUE;
            } 
            // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
