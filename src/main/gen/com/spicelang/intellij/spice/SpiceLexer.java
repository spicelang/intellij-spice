// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Spice.flex

package com.spicelang.intellij.spice;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.spicelang.intellij.spice.psi.SpiceTypes;


class SpiceLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\6\24\2\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\0\1\34\1\35\1\34\1\36\1\37\1\34\1\40"+
    "\1\41\6\40\1\42\10\40\1\41\2\40\1\43\1\44"+
    "\1\45\1\46\1\47\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\47\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\47\1\67\1\70\1\71"+
    "\1\72\1\47\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\6\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\6\32\1\33\6\32\1\34"+
    "\5\32\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\1\0\1\43\1\44\1\45\1\46\1\0\1\47\1\0"+
    "\1\50\1\51\1\52\1\53\1\0\2\17\1\54\1\55"+
    "\1\0\1\56\1\0\1\57\1\60\4\0\1\61\1\62"+
    "\1\17\1\63\1\0\1\64\1\65\1\66\1\0\1\67"+
    "\1\32\1\70\5\32\1\71\7\32\1\72\22\32\1\73"+
    "\1\74\4\0\1\75\3\0\4\17\1\76\1\77\11\32"+
    "\1\100\2\32\1\101\1\32\1\102\3\32\1\103\1\104"+
    "\2\32\1\105\15\32\4\17\1\0\1\56\3\0\1\106"+
    "\3\32\1\107\1\32\1\110\1\111\4\32\1\112\1\113"+
    "\2\32\1\114\3\32\1\115\1\116\12\32\1\117\1\120"+
    "\3\32\1\106\1\121\1\122\2\32\1\123\1\32\1\124"+
    "\2\32\1\125\5\32\1\126\3\32\1\127\6\32\1\130"+
    "\1\32\1\131\2\32\1\132\1\32\1\133\1\134\2\32"+
    "\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144"+
    "\1\32\1\145\1\146\1\32\1\147\3\32\1\150\1\32"+
    "\1\151\1\152\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\103\0\103\0\u025b\0\u029e\0\103\0\u02e1\0\u0324"+
    "\0\u0367\0\u03aa\0\u03ed\0\u0430\0\103\0\u0473\0\u04b6\0\u04f9"+
    "\0\103\0\u053c\0\103\0\103\0\u057f\0\u05c2\0\u0605\0\u0648"+
    "\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860"+
    "\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78"+
    "\0\103\0\u0abb\0\103\0\103\0\103\0\u010c\0\103\0\u0afe"+
    "\0\103\0\103\0\103\0\103\0\u0218\0\103\0\u0b41\0\103"+
    "\0\103\0\103\0\103\0\u0b84\0\u0bc7\0\u0c0a\0\103\0\103"+
    "\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\103\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\103\0\103\0\u0e65\0\103\0\u0ea8\0\103\0\103"+
    "\0\103\0\u0eeb\0\103\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u05c2\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\103\0\103\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\103\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\103\0\103\0\u1ab2\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u05c2\0\u1d0d"+
    "\0\u1d50\0\u05c2\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u05c2\0\u1f25\0\u1f68\0\u05c2\0\u1fab\0\u1fee\0\u2031\0\u2074"+
    "\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c"+
    "\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u241e\0\u2461"+
    "\0\u24a4\0\u24e7\0\u24a4\0\u252a\0\u256d\0\u25b0\0\u05c2\0\u25f3"+
    "\0\u05c2\0\u05c2\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u05c2\0\u05c2"+
    "\0\u2742\0\u2785\0\u05c2\0\u27c8\0\u280b\0\u284e\0\u05c2\0\u05c2"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u05c2\0\u05c2\0\u2b2f\0\u2b72\0\u2bb5\0\103"+
    "\0\103\0\u05c2\0\u2bf8\0\u2c3b\0\u05c2\0\u2c7e\0\u05c2\0\u2cc1"+
    "\0\u2d04\0\u05c2\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u05c2"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u05c2\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028"+
    "\0\u306b\0\u30ae\0\u05c2\0\u30f1\0\u05c2\0\u3134\0\u3177\0\u05c2"+
    "\0\u31ba\0\u05c2\0\u05c2\0\u31fd\0\u3240\0\u05c2\0\u05c2\0\u05c2"+
    "\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u05c2\0\u3283\0\u05c2\0\u05c2"+
    "\0\u32c6\0\u05c2\0\u3309\0\u334c\0\u338f\0\u05c2\0\u33d2\0\u05c2"+
    "\0\u05c2\0\u05c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\3\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\7\32\1\33\1\2\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\36\1\45\1\46"+
    "\1\36\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\3\36\1\61\1\62\1\63\1\64"+
    "\104\0\2\3\131\0\1\65\51\0\5\66\1\67\36\66"+
    "\1\70\36\66\4\0\1\71\127\0\1\72\61\0\1\73"+
    "\20\0\1\74\51\0\11\75\1\76\32\75\1\77\36\75"+
    "\31\0\1\100\66\0\1\101\13\0\1\102\70\0\1\103"+
    "\1\104\1\0\1\105\3\106\3\0\1\107\1\110\70\0"+
    "\1\111\1\0\4\112\71\0\1\113\4\0\1\114\7\0"+
    "\1\115\71\0\1\104\1\0\4\23\7\0\1\116\1\117"+
    "\2\0\1\120\1\121\6\0\1\116\1\0\1\117\3\0"+
    "\1\120\2\0\1\122\2\0\1\121\2\0\1\123\1\0"+
    "\1\124\1\0\1\120\26\0\1\104\1\0\4\23\34\0"+
    "\1\122\5\0\1\123\1\0\1\124\36\0\1\125\104\0"+
    "\1\126\1\127\102\0\1\130\102\0\1\131\1\132\72\0"+
    "\4\32\6\0\7\32\4\0\30\32\35\0\1\133\73\0"+
    "\4\36\6\0\7\36\4\0\30\36\26\0\4\36\6\0"+
    "\7\36\4\0\13\36\1\134\5\36\1\135\6\36\26\0"+
    "\4\36\6\0\7\36\4\0\16\36\1\136\1\36\1\137"+
    "\5\36\1\140\1\36\26\0\4\36\6\0\7\36\4\0"+
    "\10\36\1\141\5\36\1\142\11\36\26\0\4\36\6\0"+
    "\7\36\4\0\16\36\1\143\7\36\1\144\1\36\26\0"+
    "\4\36\6\0\7\36\4\0\13\36\1\145\1\36\1\146"+
    "\7\36\1\147\2\36\26\0\4\36\6\0\7\36\4\0"+
    "\1\36\1\150\14\36\1\151\11\36\26\0\4\36\6\0"+
    "\7\36\4\0\5\36\1\152\22\36\26\0\4\36\6\0"+
    "\7\36\4\0\6\36\1\153\5\36\1\154\1\155\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\156\10\36"+
    "\1\157\11\36\26\0\4\36\6\0\7\36\4\0\1\36"+
    "\1\160\26\36\26\0\4\36\6\0\7\36\4\0\11\36"+
    "\1\161\16\36\26\0\4\36\6\0\7\36\4\0\17\36"+
    "\1\162\10\36\26\0\4\36\6\0\7\36\4\0\1\36"+
    "\1\163\16\36\1\164\2\36\1\165\4\36\26\0\4\36"+
    "\6\0\7\36\4\0\5\36\1\166\22\36\26\0\4\36"+
    "\6\0\7\36\4\0\10\36\1\167\1\170\10\36\1\171"+
    "\5\36\26\0\4\36\6\0\7\36\4\0\20\36\1\172"+
    "\5\36\1\173\1\36\26\0\4\36\6\0\7\36\4\0"+
    "\15\36\1\174\12\36\26\0\4\36\6\0\7\36\4\0"+
    "\10\36\1\175\17\36\35\0\1\176\46\0\1\177\2\0"+
    "\2\66\2\0\77\66\2\75\2\0\77\75\22\0\4\112"+
    "\75\0\1\104\1\0\4\106\7\0\1\200\1\201\2\0"+
    "\1\202\1\203\6\0\1\200\1\0\1\201\3\0\1\202"+
    "\2\0\1\122\2\0\1\203\2\0\1\123\3\0\1\202"+
    "\26\0\1\104\1\0\4\106\34\0\1\122\5\0\1\123"+
    "\32\0\1\204\104\0\4\112\11\0\1\205\14\0\1\205"+
    "\26\0\14\206\1\207\66\206\2\114\2\0\77\114\22\0"+
    "\2\210\101\0\4\211\77\0\4\212\6\0\4\212\10\0"+
    "\6\212\47\0\3\213\140\0\1\122\5\0\1\123\43\0"+
    "\1\214\102\0\1\215\73\0\4\36\6\0\7\36\4\0"+
    "\11\36\1\216\16\36\26\0\4\36\6\0\7\36\4\0"+
    "\21\36\1\217\6\36\26\0\4\36\6\0\7\36\4\0"+
    "\16\36\1\220\11\36\26\0\4\36\6\0\7\36\4\0"+
    "\5\36\1\221\22\36\26\0\4\36\6\0\7\36\4\0"+
    "\22\36\1\222\5\36\26\0\4\36\6\0\7\36\4\0"+
    "\1\36\1\223\26\36\26\0\4\36\6\0\7\36\4\0"+
    "\14\36\1\224\1\225\12\36\26\0\4\36\6\0\7\36"+
    "\4\0\23\36\1\226\4\36\26\0\4\36\6\0\7\36"+
    "\4\0\15\36\1\227\12\36\26\0\4\36\6\0\7\36"+
    "\4\0\21\36\1\230\6\36\26\0\4\36\6\0\7\36"+
    "\4\0\23\36\1\231\4\36\26\0\4\36\6\0\7\36"+
    "\4\0\22\36\1\232\5\36\26\0\4\36\6\0\7\36"+
    "\4\0\13\36\1\233\14\36\26\0\4\36\6\0\7\36"+
    "\4\0\20\36\1\234\7\36\26\0\4\36\6\0\7\36"+
    "\4\0\1\36\1\235\26\36\26\0\4\36\6\0\7\36"+
    "\4\0\17\36\1\236\10\36\26\0\4\36\6\0\7\36"+
    "\4\0\13\36\1\237\6\36\1\240\5\36\26\0\4\36"+
    "\6\0\7\36\4\0\15\36\1\241\12\36\26\0\4\36"+
    "\6\0\7\36\4\0\15\36\1\242\12\36\26\0\4\36"+
    "\6\0\7\36\4\0\11\36\1\243\16\36\26\0\4\36"+
    "\6\0\7\36\4\0\13\36\1\244\14\36\26\0\4\36"+
    "\6\0\7\36\4\0\5\36\1\245\22\36\26\0\4\36"+
    "\6\0\7\36\4\0\15\36\1\246\12\36\26\0\4\36"+
    "\6\0\7\36\4\0\11\36\1\247\16\36\26\0\4\36"+
    "\6\0\7\36\4\0\2\36\1\250\25\36\26\0\4\36"+
    "\6\0\7\36\4\0\22\36\1\251\5\36\26\0\4\36"+
    "\6\0\7\36\4\0\16\36\1\252\11\36\26\0\4\36"+
    "\6\0\7\36\4\0\7\36\1\253\17\36\1\254\26\0"+
    "\4\36\6\0\7\36\4\0\20\36\1\255\7\36\26\0"+
    "\4\36\6\0\7\36\4\0\23\36\1\256\4\36\26\0"+
    "\4\36\6\0\7\36\4\0\17\36\1\257\10\36\26\0"+
    "\4\36\6\0\7\36\4\0\21\36\1\260\6\36\26\0"+
    "\4\36\6\0\7\36\4\0\11\36\1\261\16\36\26\0"+
    "\2\262\101\0\4\263\77\0\4\264\6\0\4\264\10\0"+
    "\6\264\47\0\3\265\73\0\1\266\1\0\1\266\2\0"+
    "\4\267\55\0\14\206\1\270\66\206\14\271\1\272\4\271"+
    "\1\273\61\271\22\0\2\210\36\0\1\122\5\0\1\123"+
    "\1\0\1\124\32\0\4\211\34\0\1\122\5\0\1\123"+
    "\1\0\1\124\32\0\4\212\6\0\4\212\10\0\6\212"+
    "\4\0\1\122\5\0\1\123\1\0\1\124\32\0\3\213"+
    "\35\0\1\122\5\0\1\123\1\0\1\124\32\0\4\36"+
    "\6\0\7\36\4\0\1\36\1\274\5\36\1\275\20\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\276\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\13\36\1\277\14\36"+
    "\26\0\4\36\6\0\7\36\4\0\1\36\1\300\26\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\301\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\20\36\1\302\7\36"+
    "\26\0\4\36\6\0\7\36\4\0\17\36\1\303\10\36"+
    "\26\0\4\36\6\0\7\36\4\0\21\36\1\304\1\305"+
    "\5\36\26\0\4\36\6\0\7\36\4\0\2\36\1\306"+
    "\25\36\26\0\4\36\6\0\7\36\4\0\5\36\1\307"+
    "\22\36\26\0\4\36\6\0\7\36\4\0\14\36\1\310"+
    "\13\36\26\0\4\36\6\0\7\36\4\0\21\36\1\311"+
    "\6\36\26\0\4\36\6\0\7\36\4\0\5\36\1\312"+
    "\22\36\26\0\4\36\6\0\7\36\4\0\17\36\1\313"+
    "\10\36\26\0\4\36\6\0\7\36\4\0\16\36\1\314"+
    "\11\36\26\0\4\36\6\0\7\36\4\0\11\36\1\315"+
    "\16\36\26\0\4\36\6\0\7\36\4\0\5\36\1\316"+
    "\22\36\26\0\4\36\6\0\7\36\4\0\7\36\1\317"+
    "\20\36\26\0\4\36\6\0\7\36\4\0\15\36\1\320"+
    "\12\36\26\0\4\36\6\0\7\36\4\0\20\36\1\321"+
    "\7\36\26\0\4\36\6\0\7\36\4\0\11\36\1\322"+
    "\16\36\26\0\4\36\6\0\7\36\4\0\15\36\1\323"+
    "\12\36\26\0\4\36\6\0\7\36\4\0\13\36\1\324"+
    "\14\36\26\0\4\36\6\0\7\36\4\0\23\36\1\325"+
    "\4\36\26\0\4\36\6\0\7\36\4\0\20\36\1\326"+
    "\7\36\26\0\4\36\6\0\7\36\4\0\15\36\1\327"+
    "\12\36\26\0\4\36\6\0\7\36\4\0\5\36\1\330"+
    "\22\36\26\0\4\36\6\0\7\36\4\0\11\36\1\331"+
    "\11\36\1\332\4\36\26\0\4\36\6\0\7\36\4\0"+
    "\5\36\1\333\22\36\26\0\4\36\6\0\7\36\4\0"+
    "\5\36\1\334\22\36\26\0\4\36\6\0\7\36\4\0"+
    "\1\36\1\335\7\36\1\336\16\36\26\0\4\36\6\0"+
    "\7\36\4\0\13\36\1\337\14\36\26\0\2\262\36\0"+
    "\1\122\5\0\1\123\34\0\4\263\34\0\1\122\5\0"+
    "\1\123\34\0\4\264\6\0\4\264\10\0\6\264\4\0"+
    "\1\122\5\0\1\123\34\0\3\265\35\0\1\122\5\0"+
    "\1\123\34\0\4\267\55\0\14\206\1\270\4\206\1\340"+
    "\61\206\14\271\1\272\102\271\1\272\4\271\1\341\61\271"+
    "\22\0\4\36\6\0\7\36\4\0\21\36\1\342\6\36"+
    "\26\0\4\36\6\0\7\36\4\0\15\36\1\343\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\20\36\1\344\7\36"+
    "\26\0\4\36\6\0\7\36\4\0\12\36\1\345\15\36"+
    "\26\0\4\36\6\0\7\36\4\0\16\36\1\346\11\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\347\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\11\36\1\350\16\36"+
    "\26\0\4\36\6\0\7\36\4\0\13\36\1\351\14\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\352\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\1\36\1\353\26\36"+
    "\26\0\4\36\6\0\7\36\4\0\20\36\1\354\7\36"+
    "\26\0\4\36\6\0\7\36\4\0\15\36\1\355\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\20\36\1\356\7\36"+
    "\26\0\4\36\6\0\7\36\4\0\1\36\1\357\26\36"+
    "\26\0\4\36\6\0\7\36\4\0\3\36\1\360\24\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\361\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\11\36\1\362\16\36"+
    "\26\0\4\36\6\0\7\36\4\0\20\36\1\363\7\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\364\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\365\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\16\36\1\366\11\36"+
    "\26\0\4\36\6\0\7\36\4\0\15\36\1\367\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\3\36\1\370\24\36"+
    "\26\0\4\36\6\0\7\36\4\0\6\36\1\371\21\36"+
    "\26\0\4\36\6\0\7\36\4\0\7\36\1\372\20\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\373\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\16\36\1\374\11\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\375\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\21\36\1\376\6\36"+
    "\26\0\4\36\6\0\7\36\4\0\15\36\1\377\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u0100\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\3\36\1\u0101\24\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\u0102\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u0103\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\6\36\1\u0104\21\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\u0105\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\6\36\1\u0106\21\36"+
    "\26\0\4\36\6\0\7\36\4\0\3\36\1\u0107\24\36"+
    "\26\0\4\36\6\0\7\36\4\0\15\36\1\u0108\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\4\36\1\u0109\23\36"+
    "\26\0\4\36\6\0\7\36\4\0\6\36\1\u010a\21\36"+
    "\26\0\4\36\6\0\7\36\4\0\7\36\1\u010b\20\36"+
    "\26\0\4\36\6\0\7\36\4\0\22\36\1\u010c\5\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u010d\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\15\36\1\u010e\12\36"+
    "\26\0\4\36\6\0\7\36\4\0\6\36\1\u010f\21\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u0110\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\23\36\1\u0111\4\36"+
    "\26\0\4\36\6\0\7\36\4\0\10\36\1\u0112\17\36"+
    "\26\0\4\36\6\0\7\36\4\0\1\36\1\u0113\26\36"+
    "\26\0\4\36\6\0\7\36\4\0\16\36\1\u0114\11\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u0115\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u0116\22\36"+
    "\26\0\4\36\6\0\7\36\4\0\3\36\1\u0117\24\36"+
    "\26\0\4\36\6\0\7\36\4\0\20\36\1\u0118\7\36"+
    "\26\0\4\36\6\0\7\36\4\0\4\36\1\u0119\23\36"+
    "\26\0\4\36\6\0\7\36\4\0\5\36\1\u011a\22\36"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13333];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\2\11\2\1\1\11\6\1\1\11"+
    "\3\1\1\11\1\1\2\11\24\1\1\11\1\1\3\11"+
    "\1\0\1\11\1\0\4\11\1\0\1\11\1\0\4\11"+
    "\1\0\2\1\2\11\1\0\1\1\1\0\1\1\1\11"+
    "\4\0\2\11\1\1\1\11\1\0\3\11\1\0\1\11"+
    "\42\1\2\11\4\0\1\11\3\0\4\1\2\11\50\1"+
    "\1\0\1\1\3\0\45\1\2\11\71\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SpiceLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 108: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 3:
            { return SpiceTypes.NOT;
            }
          // fall through
          case 110: break;
          case 4:
            { return SpiceTypes.TOPLEVEL_ATTR_PREAMBLE;
            }
          // fall through
          case 111: break;
          case 5:
            { return SpiceTypes.REM;
            }
          // fall through
          case 112: break;
          case 6:
            { return SpiceTypes.BITWISE_AND;
            }
          // fall through
          case 113: break;
          case 7:
            { return SpiceTypes.LPAREN;
            }
          // fall through
          case 114: break;
          case 8:
            { return SpiceTypes.RPAREN;
            }
          // fall through
          case 115: break;
          case 9:
            { return SpiceTypes.MUL;
            }
          // fall through
          case 116: break;
          case 10:
            { return SpiceTypes.PLUS;
            }
          // fall through
          case 117: break;
          case 11:
            { return SpiceTypes.COMMA;
            }
          // fall through
          case 118: break;
          case 12:
            { return SpiceTypes.MINUS;
            }
          // fall through
          case 119: break;
          case 13:
            { return SpiceTypes.DOT;
            }
          // fall through
          case 120: break;
          case 14:
            { return SpiceTypes.DIV;
            }
          // fall through
          case 121: break;
          case 15:
            { return SpiceTypes.INT_LIT;
            }
          // fall through
          case 122: break;
          case 16:
            { return SpiceTypes.COLON;
            }
          // fall through
          case 123: break;
          case 17:
            { return SpiceTypes.SEMICOLON;
            }
          // fall through
          case 124: break;
          case 18:
            { return SpiceTypes.LESS;
            }
          // fall through
          case 125: break;
          case 19:
            { return SpiceTypes.ASSIGN;
            }
          // fall through
          case 126: break;
          case 20:
            { return SpiceTypes.GREATER;
            }
          // fall through
          case 127: break;
          case 21:
            { return SpiceTypes.QUESTION_MARK;
            }
          // fall through
          case 128: break;
          case 22:
            { return SpiceTypes.TYPE_IDENTIFIER;
            }
          // fall through
          case 129: break;
          case 23:
            { return SpiceTypes.LBRACKET;
            }
          // fall through
          case 130: break;
          case 24:
            { return SpiceTypes.RBRACKET;
            }
          // fall through
          case 131: break;
          case 25:
            { return SpiceTypes.BITWISE_XOR;
            }
          // fall through
          case 132: break;
          case 26:
            { return SpiceTypes.IDENTIFIER;
            }
          // fall through
          case 133: break;
          case 27:
            { return SpiceTypes.F;
            }
          // fall through
          case 134: break;
          case 28:
            { return SpiceTypes.P;
            }
          // fall through
          case 135: break;
          case 29:
            { return SpiceTypes.LBRACE;
            }
          // fall through
          case 136: break;
          case 30:
            { return SpiceTypes.BITWISE_OR;
            }
          // fall through
          case 137: break;
          case 31:
            { return SpiceTypes.RBRACE;
            }
          // fall through
          case 138: break;
          case 32:
            { return SpiceTypes.BITWISE_NOT;
            }
          // fall through
          case 139: break;
          case 33:
            { return SpiceTypes.NOT_EQUAL;
            }
          // fall through
          case 140: break;
          case 34:
            { return SpiceTypes.STRING_LIT;
            }
          // fall through
          case 141: break;
          case 35:
            { return SpiceTypes.MOD_ATTR_PREAMBLE;
            }
          // fall through
          case 142: break;
          case 36:
            { return SpiceTypes.REM_EQUAL;
            }
          // fall through
          case 143: break;
          case 37:
            { return SpiceTypes.LOGICAL_AND;
            }
          // fall through
          case 144: break;
          case 38:
            { return SpiceTypes.AND_EQUAL;
            }
          // fall through
          case 145: break;
          case 39:
            { return SpiceTypes.CHAR_LIT;
            }
          // fall through
          case 146: break;
          case 40:
            { return SpiceTypes.MUL_EQUAL;
            }
          // fall through
          case 147: break;
          case 41:
            { return SpiceTypes.PLUS_PLUS;
            }
          // fall through
          case 148: break;
          case 42:
            { return SpiceTypes.PLUS_EQUAL;
            }
          // fall through
          case 149: break;
          case 43:
            { return SpiceTypes.MINUS_MINUS;
            }
          // fall through
          case 150: break;
          case 44:
            { return SpiceTypes.MINUS_EQUAL;
            }
          // fall through
          case 151: break;
          case 45:
            { return SpiceTypes.ARROW;
            }
          // fall through
          case 152: break;
          case 46:
            { return SpiceTypes.DOUBLE_LIT;
            }
          // fall through
          case 153: break;
          case 47:
            { return SpiceTypes.LINE_COMMENT;
            }
          // fall through
          case 154: break;
          case 48:
            { return SpiceTypes.DIV_EQUAL;
            }
          // fall through
          case 155: break;
          case 49:
            { return SpiceTypes.LONG_LIT;
            }
          // fall through
          case 156: break;
          case 50:
            { return SpiceTypes.SHORT_LIT;
            }
          // fall through
          case 157: break;
          case 51:
            { return SpiceTypes.SCOPE_ACCESS;
            }
          // fall through
          case 158: break;
          case 52:
            { return SpiceTypes.LESS_EQUAL;
            }
          // fall through
          case 159: break;
          case 53:
            { return SpiceTypes.EQUAL;
            }
          // fall through
          case 160: break;
          case 54:
            { return SpiceTypes.GREATER_EQUAL;
            }
          // fall through
          case 161: break;
          case 55:
            { return SpiceTypes.XOR_EQUAL;
            }
          // fall through
          case 162: break;
          case 56:
            { return SpiceTypes.AS;
            }
          // fall through
          case 163: break;
          case 57:
            { return SpiceTypes.DO;
            }
          // fall through
          case 164: break;
          case 58:
            { return SpiceTypes.IF;
            }
          // fall through
          case 165: break;
          case 59:
            { return SpiceTypes.OR_EQUAL;
            }
          // fall through
          case 166: break;
          case 60:
            { return SpiceTypes.LOGICAL_OR;
            }
          // fall through
          case 167: break;
          case 61:
            { return SpiceTypes.ELLIPSIS;
            }
          // fall through
          case 168: break;
          case 62:
            { return SpiceTypes.SHL_EQUAL;
            }
          // fall through
          case 169: break;
          case 63:
            { return SpiceTypes.SHR_EQUAL;
            }
          // fall through
          case 170: break;
          case 64:
            { return SpiceTypes.TYPE_DYN;
            }
          // fall through
          case 171: break;
          case 65:
            { return SpiceTypes.EXT;
            }
          // fall through
          case 172: break;
          case 66:
            { return SpiceTypes.FOR;
            }
          // fall through
          case 173: break;
          case 67:
            { return SpiceTypes.TYPE_INT;
            }
          // fall through
          case 174: break;
          case 68:
            { return SpiceTypes.LEN;
            }
          // fall through
          case 175: break;
          case 69:
            { return SpiceTypes.NIL;
            }
          // fall through
          case 176: break;
          case 70:
            { return SpiceTypes.BLOCK_COMMENT;
            }
          // fall through
          case 177: break;
          case 71:
            { return SpiceTypes.TYPE_BOOL;
            }
          // fall through
          case 178: break;
          case 72:
            { return SpiceTypes.TYPE_BYTE;
            }
          // fall through
          case 179: break;
          case 73:
            { return SpiceTypes.TYPE_CHAR;
            }
          // fall through
          case 180: break;
          case 74:
            { return SpiceTypes.ELSE;
            }
          // fall through
          case 181: break;
          case 75:
            { return SpiceTypes.ENUM;
            }
          // fall through
          case 182: break;
          case 76:
            { return SpiceTypes.HEAP;
            }
          // fall through
          case 183: break;
          case 77:
            { return SpiceTypes.TYPE_LONG;
            }
          // fall through
          case 184: break;
          case 78:
            { return SpiceTypes.MAIN;
            }
          // fall through
          case 185: break;
          case 79:
            { return SpiceTypes.TRUE;
            }
          // fall through
          case 186: break;
          case 80:
            { return SpiceTypes.TYPE;
            }
          // fall through
          case 187: break;
          case 81:
            { return SpiceTypes.DOC_COMMENT;
            }
          // fall through
          case 188: break;
          case 82:
            { return SpiceTypes.ALIAS;
            }
          // fall through
          case 189: break;
          case 83:
            { return SpiceTypes.BREAK;
            }
          // fall through
          case 190: break;
          case 84:
            { return SpiceTypes.CONST;
            }
          // fall through
          case 191: break;
          case 85:
            { return SpiceTypes.FALSE;
            }
          // fall through
          case 192: break;
          case 86:
            { return SpiceTypes.PANIC;
            }
          // fall through
          case 193: break;
          case 87:
            { return SpiceTypes.TYPE_SHORT;
            }
          // fall through
          case 194: break;
          case 88:
            { return SpiceTypes.WHILE;
            }
          // fall through
          case 195: break;
          case 89:
            { return SpiceTypes.ASSERT;
            }
          // fall through
          case 196: break;
          case 90:
            { return SpiceTypes.TYPE_DOUBLE;
            }
          // fall through
          case 197: break;
          case 91:
            { return SpiceTypes.IMPORT;
            }
          // fall through
          case 198: break;
          case 92:
            { return SpiceTypes.INLINE;
            }
          // fall through
          case 199: break;
          case 93:
            { return SpiceTypes.PRINTF;
            }
          // fall through
          case 200: break;
          case 94:
            { return SpiceTypes.PUBLIC;
            }
          // fall through
          case 201: break;
          case 95:
            { return SpiceTypes.RETURN;
            }
          // fall through
          case 202: break;
          case 96:
            { return SpiceTypes.SIGNED;
            }
          // fall through
          case 203: break;
          case 97:
            { return SpiceTypes.SIZEOF;
            }
          // fall through
          case 204: break;
          case 98:
            { return SpiceTypes.TYPE_STRING;
            }
          // fall through
          case 205: break;
          case 99:
            { return SpiceTypes.STRUCT;
            }
          // fall through
          case 206: break;
          case 100:
            { return SpiceTypes.UNSAFE;
            }
          // fall through
          case 207: break;
          case 101:
            { return SpiceTypes.ALIGNOF;
            }
          // fall through
          case 208: break;
          case 102:
            { return SpiceTypes.COMPOSE;
            }
          // fall through
          case 209: break;
          case 103:
            { return SpiceTypes.FOREACH;
            }
          // fall through
          case 210: break;
          case 104:
            { return SpiceTypes.CONTINUE;
            }
          // fall through
          case 211: break;
          case 105:
            { return SpiceTypes.OPERATOR;
            }
          // fall through
          case 212: break;
          case 106:
            { return SpiceTypes.UNSIGNED;
            }
          // fall through
          case 213: break;
          case 107:
            { return SpiceTypes.INTERFACE;
            }
          // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
