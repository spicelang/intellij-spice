/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.spicelang.intellij.spice;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.spicelang.intellij.spice.psi.SpiceTokenType;
import com.spicelang.intellij.spice.psi.SpiceTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Spice.flex</tt>
 */
class SpiceLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\31\1\23\2\24\1\23\22\0\1\31\1\74\1\25\2\0\1\71\1\66\1\21\1\61\1\62"+
    "\1\30\1\16\1\101\1\12\1\14\1\27\1\1\1\5\6\11\2\3\1\100\1\77\1\72\1\70\1\73"+
    "\1\76\1\0\1\7\1\4\1\7\1\2\1\15\1\7\1\26\1\6\6\26\1\10\10\26\1\6\2\26\1\63"+
    "\1\22\1\64\1\67\1\26\1\0\1\46\1\34\1\45\1\32\1\35\1\50\1\43\1\41\1\36\1\55"+
    "\1\53\1\20\1\52\1\37\1\33\1\47\1\26\1\42\1\17\1\40\1\13\1\26\1\51\1\56\1\44"+
    "\1\54\1\57\1\65\1\60\1\75\6\0\1\24\242\0\2\24\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\4\1\3\1\5"+
    "\1\6\2\3\1\1\1\7\1\1\1\10\1\11\12\3"+
    "\1\12\1\13\3\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\4\0\1\2"+
    "\1\0\1\37\1\40\2\2\1\41\1\42\1\3\1\43"+
    "\1\0\1\44\1\45\5\3\1\0\1\46\3\0\1\47"+
    "\1\50\1\0\1\51\1\52\1\3\1\53\10\3\1\54"+
    "\12\3\1\55\10\3\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\0\1\66\1\0\1\67\1\70"+
    "\4\2\4\0\1\3\1\0\1\71\5\3\1\72\2\0"+
    "\1\73\1\3\1\74\5\3\1\75\1\3\1\76\1\3"+
    "\1\77\1\100\13\3\1\101\4\3\1\102\1\103\4\2"+
    "\2\3\1\43\1\0\5\3\1\104\2\0\1\105\1\0"+
    "\1\3\1\106\1\3\1\107\1\110\1\111\4\3\1\112"+
    "\1\113\1\114\3\3\1\115\7\3\1\116\1\117\6\3"+
    "\1\120\1\105\1\121\1\3\1\122\5\3\1\123\2\3"+
    "\1\124\3\3\1\125\1\126\1\3\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\3\1\136\1\137\1\140"+
    "\1\3\1\141\1\142\1\143\4\3\1\144\1\145\1\3"+
    "\1\146\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\u07fe\0\u0840\0\u0882"+
    "\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\102\0\102\0\102"+
    "\0\u0a0e\0\102\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\102\0\102\0\u0bdc\0\u0c1e\0\102\0\102\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\102\0\102\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u02d6\0\102\0\u0e70\0\u035a\0\u0eb2\0\102\0\u0ef4\0\u0f36"+
    "\0\102\0\102\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\306\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\u16f2\0\102\0\u1734\0\102\0\102\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\102"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\306\0\u1b54\0\u1b96"+
    "\0\306\0\u1bd8\0\306\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\306\0\u1d64\0\u1da6\0\u1de8\0\306\0\306\0\u1e2a\0\u1e6c"+
    "\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c"+
    "\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\102\0\102"+
    "\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\306\0\u2562\0\u25a4"+
    "\0\u25a4\0\u25e6\0\u2628\0\306\0\u266a\0\306\0\306\0\306"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\306\0\306\0\306\0\u27b4"+
    "\0\u27f6\0\u2838\0\306\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982"+
    "\0\u29c4\0\u2a06\0\306\0\306\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\306\0\102\0\102\0\u2bd4\0\306\0\u2c16"+
    "\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\306\0\u2d60\0\u2da2\0\306"+
    "\0\u2de4\0\u2e26\0\u2e68\0\306\0\306\0\u2eaa\0\306\0\306"+
    "\0\306\0\306\0\306\0\306\0\306\0\u2eec\0\306\0\306"+
    "\0\306\0\u2f2e\0\306\0\306\0\306\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\306\0\306\0\u3078\0\306\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\5\3\4\1\5"+
    "\1\6\1\7\1\10\1\4\1\11\1\12\1\13\1\14"+
    "\1\2\1\15\1\2\1\16\1\4\1\17\1\20\1\15"+
    "\1\21\1\4\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\4\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\4\1\37\1\4\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\103\0\1\5"+
    "\1\63\1\5\1\64\1\5\1\65\1\0\1\66\1\5"+
    "\1\0\1\67\1\70\2\0\1\71\1\72\11\0\1\63"+
    "\1\66\1\64\4\0\1\65\14\0\1\65\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\25\4\24\0\1\5\1\0\1\5\1\0\1\5"+
    "\3\0\1\5\1\0\1\67\1\70\2\0\1\71\1\72"+
    "\62\0\1\73\1\0\1\74\1\0\1\74\3\0\1\74"+
    "\1\75\1\0\1\70\53\0\1\76\12\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\5\4\1\77\17\4\24\0\1\100\1\0\1\100\1\0"+
    "\1\100\3\0\1\100\2\0\1\101\103\0\1\102\51\0"+
    "\1\103\12\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\4\4\1\104\1\4\1\105"+
    "\1\106\15\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\1\4\1\107\1\4"+
    "\1\110\21\4\23\0\21\111\1\112\1\113\57\111\23\0"+
    "\1\15\5\0\1\15\50\0\22\114\1\115\2\114\1\116"+
    "\54\114\27\0\1\117\1\120\37\0\1\121\101\0\1\122"+
    "\12\0\11\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\123\5\0\1\4\3\0\1\4\1\124\10\4\1\125"+
    "\12\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\1\4\1\126\6\4\1\127"+
    "\1\4\1\130\12\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\131\5\0\1\4\3\0\5\4"+
    "\1\132\16\4\1\133\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\5\4\1\134"+
    "\10\4\1\135\1\4\1\136\4\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\4\4\1\137\20\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\4\4\1\140"+
    "\2\4\1\141\1\142\1\4\1\143\12\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\3\4\1\144\21\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\3\4"+
    "\1\145\21\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\1\4\1\146\5\4"+
    "\1\147\15\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\150\1\151\5\0\1\4\3\0\25\4\24\0"+
    "\11\4\1\0\1\152\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\10\4\1\153\14\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\1\4\1\154\12\4\1\155\10\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\7\4\1\156\15\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\14\4\1\157"+
    "\10\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\1\4\1\160\23\4\110\0"+
    "\1\161\2\0\1\162\77\0\1\163\1\0\1\164\101\0"+
    "\1\165\101\0\1\166\101\0\1\167\101\0\1\170\1\0"+
    "\1\171\77\0\1\172\2\0\1\173\76\0\1\174\111\0"+
    "\1\175\2\0\1\176\1\0\1\176\1\0\1\176\3\0"+
    "\1\176\71\0\1\177\3\0\1\177\75\0\5\200\1\0"+
    "\1\200\1\0\1\200\3\0\1\200\14\0\1\200\1\0"+
    "\2\200\7\0\2\200\1\0\1\200\32\0\1\201\3\0"+
    "\1\201\3\0\1\201\107\0\1\71\1\72\62\0\1\100"+
    "\1\0\1\100\1\0\1\100\3\0\1\100\71\0\1\74"+
    "\1\202\1\74\1\203\1\74\1\204\1\0\1\205\1\74"+
    "\2\0\1\70\2\0\1\71\1\72\11\0\1\202\1\205"+
    "\1\203\4\0\1\204\14\0\1\204\24\0\1\74\1\0"+
    "\1\74\1\0\1\74\3\0\1\74\2\0\1\70\2\0"+
    "\1\71\1\72\62\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\206\1\4\5\0\1\4\3\0\25\4\24\0"+
    "\1\100\1\0\1\100\1\0\1\100\3\0\1\100\3\0"+
    "\1\207\17\0\1\207\60\0\1\210\66\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\11\4\1\211\10\4\1\212\2\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\10\4\1\213\14\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\1\4\1\214"+
    "\23\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\5\4\1\215\17\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\5\4\1\216\17\4\23\0\23\111\2\0"+
    "\55\111\23\114\2\0\55\114\23\117\2\0\55\117\30\217"+
    "\1\220\51\217\1\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\221\5\0\1\4\3\0\25\4\24\0"+
    "\11\4\1\0\1\222\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\25\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\5\4\1\223"+
    "\17\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\1\4\1\224\23\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\3\4\1\225\21\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\6\4\1\226\16\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\227\1\4\5\0\1\4\3\0\25\4"+
    "\24\0\11\4\1\0\1\230\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\25\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\6\4"+
    "\1\231\16\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\232\5\0\1\4\3\0\6\4\1\233"+
    "\16\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\15\4\1\234\7\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\1\4\1\235"+
    "\5\0\1\4\3\0\25\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\1\236"+
    "\24\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\10\4\1\237\14\4\24\0"+
    "\11\4\1\0\1\240\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\25\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\15\4\1\241"+
    "\7\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\14\4\1\242\10\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\6\4\1\243\16\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\5\4\1\244\17\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\14\4\1\245"+
    "\10\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\246\1\4\5\0\1\4\3\0\25\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\4\4\1\247\20\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\2\4"+
    "\1\250\22\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\4\4\1\251\20\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\10\4\1\252\14\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\253\5\0"+
    "\1\4\3\0\25\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\4\4\1\254"+
    "\20\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\4\4\1\255\20\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\4\4\1\256\20\4\113\0\1\257\101\0"+
    "\1\260\12\0\1\176\1\0\1\176\1\0\1\176\3\0"+
    "\1\176\1\0\1\67\3\0\1\71\1\72\62\0\1\177"+
    "\3\0\1\177\5\0\1\67\3\0\1\71\1\72\62\0"+
    "\5\200\1\0\1\200\1\0\1\200\1\0\1\67\1\0"+
    "\1\200\1\0\1\71\1\72\11\0\1\200\1\0\2\200"+
    "\7\0\2\200\1\0\1\200\32\0\1\201\3\0\1\201"+
    "\3\0\1\201\1\0\1\67\3\0\1\71\1\72\62\0"+
    "\1\261\1\0\1\261\1\0\1\261\3\0\1\261\71\0"+
    "\1\262\3\0\1\262\75\0\5\263\1\0\1\263\1\0"+
    "\1\263\3\0\1\263\14\0\1\263\1\0\2\263\7\0"+
    "\2\263\1\0\1\263\32\0\1\264\3\0\1\264\3\0"+
    "\1\264\71\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\4\4\1\265\7\4\1\266"+
    "\10\4\24\0\1\267\1\0\1\267\1\0\1\267\3\0"+
    "\1\267\1\270\3\0\1\270\64\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\5\4"+
    "\1\271\17\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\3\4\1\272\21\4"+
    "\24\0\11\4\1\0\1\273\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\4\4\1\274\20\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\10\4\1\275\14\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\11\4"+
    "\1\276\13\4\23\0\30\217\1\277\51\217\27\300\1\301"+
    "\1\302\51\300\1\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\2\4\1\303\22\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\304\5\0\1\4\3\0\25\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\14\4\1\305\10\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\3\4\1\306"+
    "\21\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\3\4\1\307\21\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\20\4\1\310\4\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\4\4\1\311\20\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\3\4\1\312"+
    "\21\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\1\4\1\313\23\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\3\4\1\314\21\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\3\4\1\315\21\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\3\4\1\316"+
    "\21\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\15\4\1\317\7\4\24\0"+
    "\11\4\1\0\1\320\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\25\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\321\1\4\5\0\1\4\3\0\6\4"+
    "\1\322\16\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\10\4\1\323\14\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\3\4\1\324\21\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\14\4\1\325\10\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\326\5\0\1\4\3\0"+
    "\25\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\5\4\1\327\17\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\3\4\1\330\21\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\331\1\4\5\0\1\4"+
    "\3\0\25\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\332\5\0\1\4\3\0\25\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\5\4\1\333\17\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\5\4\1\334\17\4\24\0\1\261\1\0\1\261\1\0"+
    "\1\261\3\0\1\261\5\0\1\71\1\72\62\0\1\262"+
    "\3\0\1\262\11\0\1\71\1\72\62\0\5\263\1\0"+
    "\1\263\1\0\1\263\3\0\1\263\1\0\1\71\1\72"+
    "\11\0\1\263\1\0\2\263\7\0\2\263\1\0\1\263"+
    "\32\0\1\264\3\0\1\264\3\0\1\264\5\0\1\71"+
    "\1\72\62\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\11\4\1\335\13\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\16\4\1\336\6\4\24\0\1\267\1\0"+
    "\1\267\1\0\1\267\3\0\1\267\71\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\3\4\1\337\21\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\1\4\1\340"+
    "\23\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\13\4\1\341\11\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\5\4\1\342\17\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\6\4\1\343\16\4\23\0\27\217\1\344\1\277\51\217"+
    "\30\300\1\302\100\300\1\345\1\302\51\300\1\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\346\5\0"+
    "\1\4\3\0\25\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\21\4\1\347"+
    "\3\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\5\4\1\350\17\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\10\4\1\351\14\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\10\4\1\352\14\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\14\4\1\353"+
    "\10\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\10\4\1\354\14\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\6\4\1\355\16\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\4\4\1\356\20\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\10\4\1\357"+
    "\14\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\360\1\4\5\0\1\4\3\0\25\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\4\4\1\361\20\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\6\4"+
    "\1\362\16\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\14\4\1\363\10\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\3\4\1\364\21\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\3\4\1\365\21\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\5\4"+
    "\1\366\17\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\3\4\1\367\21\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\1\370\24\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\16\4\1\371\6\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\6\4\1\372"+
    "\16\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\11\4\1\373\13\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\3\4\1\374\21\4\24\0\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\5\0\1\4\3\0"+
    "\3\4\1\375\21\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\16\4\1\376"+
    "\6\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\6\4\1\377\16\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\1\u0100\24\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\5\4"+
    "\1\u0101\17\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\5\4\1\u0102\17\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\6\4\1\u0103\16\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\13\4\1\u0104\11\4\24\0\11\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\16\4"+
    "\1\u0105\6\4\24\0\11\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\5\0\1\4\3\0\13\4\1\u0106\11\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\3\4\1\u0107\21\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\14\4\1\u0108\10\4\24\0\11\4\1\0\1\u0109"+
    "\1\0\1\4\1\0\2\4\5\0\1\4\3\0\25\4"+
    "\24\0\11\4\1\0\1\4\1\0\1\4\1\0\2\4"+
    "\5\0\1\4\3\0\7\4\1\u010a\15\4\24\0\11\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\4\5\0\1\4"+
    "\3\0\1\u010b\24\4\24\0\11\4\1\0\1\4\1\0"+
    "\1\4\1\0\2\4\5\0\1\4\3\0\13\4\1\u010c"+
    "\11\4\24\0\11\4\1\0\1\4\1\0\1\4\1\0"+
    "\2\4\5\0\1\4\3\0\3\4\1\u010d\21\4\24\0"+
    "\11\4\1\0\1\4\1\0\1\4\1\0\2\4\5\0"+
    "\1\4\3\0\3\4\1\u010e\21\4\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12474];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\6\11\10\1\3\11\1\1\1\11"+
    "\4\0\1\1\1\0\2\11\2\1\2\11\2\1\1\0"+
    "\2\11\5\1\1\0\1\11\3\0\1\11\1\1\1\0"+
    "\2\11\36\1\10\11\1\0\1\11\1\0\2\11\4\1"+
    "\4\0\1\1\1\0\1\11\6\1\2\0\36\1\2\11"+
    "\7\1\1\0\6\1\2\0\1\1\1\0\41\1\2\11"+
    "\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SpiceLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 104: break;
          case 2: 
            { return SpiceTypes.INT_LIT;
            } 
            // fall through
          case 105: break;
          case 3: 
            { return SpiceTypes.IDENTIFIER;
            } 
            // fall through
          case 106: break;
          case 4: 
            { return SpiceTypes.MINUS;
            } 
            // fall through
          case 107: break;
          case 5: 
            { return SpiceTypes.DOT;
            } 
            // fall through
          case 108: break;
          case 6: 
            { return SpiceTypes.PLUS;
            } 
            // fall through
          case 109: break;
          case 7: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 110: break;
          case 8: 
            { return SpiceTypes.DIV;
            } 
            // fall through
          case 111: break;
          case 9: 
            { return SpiceTypes.MUL;
            } 
            // fall through
          case 112: break;
          case 10: 
            { return SpiceTypes.P;
            } 
            // fall through
          case 113: break;
          case 11: 
            { return SpiceTypes.F;
            } 
            // fall through
          case 114: break;
          case 12: 
            { return SpiceTypes.LBRACE;
            } 
            // fall through
          case 115: break;
          case 13: 
            { return SpiceTypes.RBRACE;
            } 
            // fall through
          case 116: break;
          case 14: 
            { return SpiceTypes.LPAREN;
            } 
            // fall through
          case 117: break;
          case 15: 
            { return SpiceTypes.RPAREN;
            } 
            // fall through
          case 118: break;
          case 16: 
            { return SpiceTypes.LBRACKET;
            } 
            // fall through
          case 119: break;
          case 17: 
            { return SpiceTypes.RBRACKET;
            } 
            // fall through
          case 120: break;
          case 18: 
            { return SpiceTypes.BITWISE_OR;
            } 
            // fall through
          case 121: break;
          case 19: 
            { return SpiceTypes.BITWISE_AND;
            } 
            // fall through
          case 122: break;
          case 20: 
            { return SpiceTypes.BITWISE_XOR;
            } 
            // fall through
          case 123: break;
          case 21: 
            { return SpiceTypes.ASSIGN;
            } 
            // fall through
          case 124: break;
          case 22: 
            { return SpiceTypes.REM;
            } 
            // fall through
          case 125: break;
          case 23: 
            { return SpiceTypes.LESS;
            } 
            // fall through
          case 126: break;
          case 24: 
            { return SpiceTypes.GREATER;
            } 
            // fall through
          case 127: break;
          case 25: 
            { return SpiceTypes.NOT;
            } 
            // fall through
          case 128: break;
          case 26: 
            { return SpiceTypes.BITWISE_NOT;
            } 
            // fall through
          case 129: break;
          case 27: 
            { return SpiceTypes.QUESTION_MARK;
            } 
            // fall through
          case 130: break;
          case 28: 
            { return SpiceTypes.SEMICOLON;
            } 
            // fall through
          case 131: break;
          case 29: 
            { return SpiceTypes.COLON;
            } 
            // fall through
          case 132: break;
          case 30: 
            { return SpiceTypes.COMMA;
            } 
            // fall through
          case 133: break;
          case 31: 
            { return SpiceTypes.SHORT_LIT;
            } 
            // fall through
          case 134: break;
          case 32: 
            { return SpiceTypes.LONG_LIT;
            } 
            // fall through
          case 135: break;
          case 33: 
            { return SpiceTypes.MINUS_MINUS;
            } 
            // fall through
          case 136: break;
          case 34: 
            { return SpiceTypes.MINUS_EQUAL;
            } 
            // fall through
          case 137: break;
          case 35: 
            { return SpiceTypes.DOUBLE_LIT;
            } 
            // fall through
          case 138: break;
          case 36: 
            { return SpiceTypes.PLUS_PLUS;
            } 
            // fall through
          case 139: break;
          case 37: 
            { return SpiceTypes.PLUS_EQUAL;
            } 
            // fall through
          case 140: break;
          case 38: 
            { return SpiceTypes.CHAR_LIT;
            } 
            // fall through
          case 141: break;
          case 39: 
            { return SpiceTypes.STRING_LIT;
            } 
            // fall through
          case 142: break;
          case 40: 
            { return SpiceTypes.LINE_COMMENT;
            } 
            // fall through
          case 143: break;
          case 41: 
            { return SpiceTypes.DIV_EQUAL;
            } 
            // fall through
          case 144: break;
          case 42: 
            { return SpiceTypes.MUL_EQUAL;
            } 
            // fall through
          case 145: break;
          case 43: 
            { return SpiceTypes.DO;
            } 
            // fall through
          case 146: break;
          case 44: 
            { return SpiceTypes.IF;
            } 
            // fall through
          case 147: break;
          case 45: 
            { return SpiceTypes.AS;
            } 
            // fall through
          case 148: break;
          case 46: 
            { return SpiceTypes.LOGICAL_OR;
            } 
            // fall through
          case 149: break;
          case 47: 
            { return SpiceTypes.OR_EQUAL;
            } 
            // fall through
          case 150: break;
          case 48: 
            { return SpiceTypes.LOGICAL_AND;
            } 
            // fall through
          case 151: break;
          case 49: 
            { return SpiceTypes.AND_EQUAL;
            } 
            // fall through
          case 152: break;
          case 50: 
            { return SpiceTypes.XOR_EQUAL;
            } 
            // fall through
          case 153: break;
          case 51: 
            { return SpiceTypes.EQUAL;
            } 
            // fall through
          case 154: break;
          case 52: 
            { return SpiceTypes.REM_EQUAL;
            } 
            // fall through
          case 155: break;
          case 53: 
            { return SpiceTypes.LESS_EQUAL;
            } 
            // fall through
          case 156: break;
          case 54: 
            { return SpiceTypes.GREATER_EQUAL;
            } 
            // fall through
          case 157: break;
          case 55: 
            { return SpiceTypes.NOT_EQUAL;
            } 
            // fall through
          case 158: break;
          case 56: 
            { return SpiceTypes.SCOPE_ACCESS;
            } 
            // fall through
          case 159: break;
          case 57: 
            { return SpiceTypes.ELLIPSIS;
            } 
            // fall through
          case 160: break;
          case 58: 
            { return SpiceTypes.LEN;
            } 
            // fall through
          case 161: break;
          case 59: 
            { return SpiceTypes.DLL;
            } 
            // fall through
          case 162: break;
          case 60: 
            { return SpiceTypes.TYPE_DYN;
            } 
            // fall through
          case 163: break;
          case 61: 
            { return SpiceTypes.EXT;
            } 
            // fall through
          case 164: break;
          case 62: 
            { return SpiceTypes.TYPE_INT;
            } 
            // fall through
          case 165: break;
          case 63: 
            { return SpiceTypes.NIL;
            } 
            // fall through
          case 166: break;
          case 64: 
            { return SpiceTypes.TID;
            } 
            // fall through
          case 167: break;
          case 65: 
            { return SpiceTypes.FOR;
            } 
            // fall through
          case 168: break;
          case 66: 
            { return SpiceTypes.SHL_EQUAL;
            } 
            // fall through
          case 169: break;
          case 67: 
            { return SpiceTypes.SHR_EQUAL;
            } 
            // fall through
          case 170: break;
          case 68: 
            { return SpiceTypes.TYPE_LONG;
            } 
            // fall through
          case 171: break;
          case 69: 
            { return SpiceTypes.BLOCK_COMMENT;
            } 
            // fall through
          case 172: break;
          case 70: 
            { return SpiceTypes.TYPE_BOOL;
            } 
            // fall through
          case 173: break;
          case 71: 
            { return SpiceTypes.TYPE_BYTE;
            } 
            // fall through
          case 174: break;
          case 72: 
            { return SpiceTypes.ELSE;
            } 
            // fall through
          case 175: break;
          case 73: 
            { return SpiceTypes.ENUM;
            } 
            // fall through
          case 176: break;
          case 74: 
            { return SpiceTypes.TRUE;
            } 
            // fall through
          case 177: break;
          case 75: 
            { return SpiceTypes.TYPE;
            } 
            // fall through
          case 178: break;
          case 76: 
            { return SpiceTypes.HEAP;
            } 
            // fall through
          case 179: break;
          case 77: 
            { return SpiceTypes.TYPE_CHAR;
            } 
            // fall through
          case 180: break;
          case 78: 
            { return SpiceTypes.MAIN;
            } 
            // fall through
          case 181: break;
          case 79: 
            { return SpiceTypes.JOIN;
            } 
            // fall through
          case 182: break;
          case 80: 
            { return SpiceTypes.TYPE_SHORT;
            } 
            // fall through
          case 183: break;
          case 81: 
            { return SpiceTypes.DOC_COMMENT;
            } 
            // fall through
          case 184: break;
          case 82: 
            { return SpiceTypes.BREAK;
            } 
            // fall through
          case 185: break;
          case 83: 
            { return SpiceTypes.CONST;
            } 
            // fall through
          case 186: break;
          case 84: 
            { return SpiceTypes.ALIAS;
            } 
            // fall through
          case 187: break;
          case 85: 
            { return SpiceTypes.FALSE;
            } 
            // fall through
          case 188: break;
          case 86: 
            { return SpiceTypes.WHILE;
            } 
            // fall through
          case 189: break;
          case 87: 
            { return SpiceTypes.UNSAFE;
            } 
            // fall through
          case 190: break;
          case 88: 
            { return SpiceTypes.SIGNED;
            } 
            // fall through
          case 191: break;
          case 89: 
            { return SpiceTypes.SIZEOF;
            } 
            // fall through
          case 192: break;
          case 90: 
            { return SpiceTypes.STRUCT;
            } 
            // fall through
          case 193: break;
          case 91: 
            { return SpiceTypes.TYPE_STRING;
            } 
            // fall through
          case 194: break;
          case 92: 
            { return SpiceTypes.TYPE_DOUBLE;
            } 
            // fall through
          case 195: break;
          case 93: 
            { return SpiceTypes.INLINE;
            } 
            // fall through
          case 196: break;
          case 94: 
            { return SpiceTypes.IMPORT;
            } 
            // fall through
          case 197: break;
          case 95: 
            { return SpiceTypes.THREAD;
            } 
            // fall through
          case 198: break;
          case 96: 
            { return SpiceTypes.RETURN;
            } 
            // fall through
          case 199: break;
          case 97: 
            { return SpiceTypes.ASSERT;
            } 
            // fall through
          case 200: break;
          case 98: 
            { return SpiceTypes.PUBLIC;
            } 
            // fall through
          case 201: break;
          case 99: 
            { return SpiceTypes.PRINTF;
            } 
            // fall through
          case 202: break;
          case 100: 
            { return SpiceTypes.FOREACH;
            } 
            // fall through
          case 203: break;
          case 101: 
            { return SpiceTypes.UNSIGNED;
            } 
            // fall through
          case 204: break;
          case 102: 
            { return SpiceTypes.CONTINUE;
            } 
            // fall through
          case 205: break;
          case 103: 
            { return SpiceTypes.INTERFACE;
            } 
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
